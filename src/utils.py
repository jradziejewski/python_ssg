import re
from htmlnode import LeafNode
from textnode import TextType


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case TextType.NORMAL_TEXT:
            return LeafNode(None, text_node.text)
        case TextType.BOLD_TEXT:
            return LeafNode("b", text_node.text)
        case TextType.ITALIC_TEXT:
            return LeafNode("i", text_node.text)
        case TextType.CODE_TEXT:
            return LeafNode("code", text_node.text)
        case TextType.LINKS:
            return LeafNode("a", text_node.text, {"href": text_node.url})
        case TextType.IMAGES:
            return LeafNode("img", "", {"src": text_node.url, "alt": text_node.text})
        case _:
            raise TypeError("text node type is invalid")

def markdown_to_blocks(markdown):
    """
    A function that takes raw Markdown string and returns a list of "block" strings.

    Parameters:
        markdown (string): raw Markdown string representing a full document

    Returns:
        (list): a list of "block" strings
    """

    return list(filter(lambda x: x != "", map(lambda x: x.strip(), re.split(r"\n\s*\n", markdown))))

def block_to_block_type(block):
    """
    A function that takes a single block generated by `markdown_to_blocks` and returns information what type of block it is.

    Parameters:
        block (string): A block of markdown text generated by `markdown_to_blocks` function.

    Returns:
        (string): string representing the type of block
    """

    # code
    if re.match(r"^```(?:\w+)?\n[\s\S]*?\n```$", block):
        return "code"

    lines = block.split("\n")

    # heading
    if block.startswith("#"):
        if len(lines) > 1:
            return "paragraph"

        if re.match(r"^#{1,6}\s+.+", lines[0]):
            return "heading"

    # quote
    elif block.startswith(">"):
        for line in lines:
            if not line.startswith(">"):
                return "paragraph"
        return "quote"

    # unordered list
    elif block.startswith("*") or block.startswith("-"):
        for line in lines:
            if not (line.startswith("* ") or line.startswith("- ")):
                return "paragraph"
        return "unordered_list"

    # ordered list
    elif block.startswith("1."):
        num = 1
        for line in lines:
            if not line.startswith(f"{num}."):
                return "paragraph"
            num += 1
        return "ordered_list"

    return "paragraph"
